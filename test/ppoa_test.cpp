//g++ -std=c++17 -Wall -O2 -g -o ppoa_test ppoa_test.cpp -L../include/WFA2-lib/lib -I../include/WFA2-lib -fopenmp -lwfacpp


#include "bindings/cpp/WFAligner.hpp"
#include "../src/anppoa.hpp"
#include <string>
#include <vector>
#include <iostream>

void runtest(const std::string& testname, std::vector<std::string>& sequences, std::string& expected)
{
  PPOA poa;
  poa.init(sequences[0]);
  wfa::WFAlignerGapAffine aligner(4,6,2,wfa::WFAligner::Alignment,wfa::WFAligner::MemoryMed);
  for(auto& seq : sequences){
    aligner.alignEnd2End(sequences[0], seq);
    std::string cigar = aligner.getAlignmentCigar();
    //std::cout << seq << '\n';
    //std::cout << cigar << '\n';
    poa.insert_alignment(seq, cigar);
  }

  poa.adjust_weights((float)sequences.size()*0.4, 0.3);
  poa.printDOT();

  std::string consensus;
  poa.consensus(consensus);
  std::cerr << testname;
  if(consensus == expected) std::cerr << ": Success\n";
  else {
    std::cerr << ": Fail\n";
    std::cerr << "Unexpected consensus sequence:\n";
    std::cerr << "Observed:  " << consensus << '\n';
    std::cerr << "Expected:  " << expected << '\n';
    exit(1);
  }
}

void test01()
{

  std::vector<std::string> sequences{
  "TCTGTTTCAAAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAGAAAAGAAAAAGCATGTTCTA",
  "TCTGTTTCAAAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAAGCATGTTCTA",
  "TCTGTTTCAAAAAAGAAAAGAAAAGAAAAGAAAAGAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAAGCATGTTCTA",
  "TCTGTTTCAAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAAGCATGTTCT",
  "TCTGTTTCAAAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAAGCATGTTCTA",
  "TCTGTTTCAAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAAGCATGTTCT",
  "TCTGTTTCAAAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAGAAAAGAAAGAAAAGAAAAAGCATGTTCTA",
"TCTGTTTCAAAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAGAAAAGAAAGAAAAGAAAAAGCATGTTCTA"
  };

  std::string expected = "TCTGTTTCAAAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAGAAAAAGCATGTTCTA";

  runtest("test01", sequences, expected);

}

void test02()
{
   std::vector<std::string> sequences{
    "TGGGTCCTTCATGTTAGAAAACCTGGCTTTACTACTACTACTACTACTACTACTACTACTACTACTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCATTTTTTAAAAATATATTATCTTATTTTAC",
    "TGGGTCCTTCATGTTAGAAAACCTGGCTTTACTACTACTACTACTACTACTACTACTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCATTTTTTAAAATATATTATCTTATTTTAC",
    "TGGGTCCTTCATGTTAGAAAACCTGGCTTTACTACTACTACTACTACTACTACTACTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCATTTTTTAAAAATATATTATCTTATTTTAC",
    "TGGGTCCTTCATGTTAGAAAACCTGGCTTTACTACTACTACTACTACTACTACTACTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCATTTTTTAAAAATATATTATCTTATTTTAC",
    "TGGGTCCTTCATGTTAGAAAACCTGGCTTTACTACTACTACTACTACTACTACTACTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCATTTTTTAAAAATATATTATCTTATTTTAC",
    "TGGGTCCTTCATGTTAGAAAACCTGGCTTTACTACTACTACTACTACTACTACTACTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCATTTTTTAAAATATATTATCTTATTTTAC",
    "TGGGTCCTTCATGTTAGAAAACCTGGCTTTACTACTACTACTACTACTACTACTACTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCATTTTTTAAAAATATATTATCTTATTTTAC",
    "TGGGTCCTTCATGTTAGAAAACCTGGCTTTACTACTACTACTACTACTACTACTACTACTACTACTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCATTTTTTAAAAATATATTATCTTATTTTAC",
    "TGGGTCCTTCATGTTAGAAAACCTGGCTTTACTACTACTACTACTACTACTACTACTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCATTTTTTAAAAATATATTATCTTATTTTAC",
    "TGGGTCCTTCATGTTAGAAAACCTGGCTTTACTACTACTACTACTACTACTACTACTACTACTACTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCATTTTTTAAAAATATATTATCTTATTTTAC",
    "TGGGTCCTTCATGTTAGAAAACCTGGCTTTACTACTACTACTACTACTACTACTACTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCATTTTTTAAAAATATATTATCTTATTTTAC",
  };
  std::string expected = "TGGGTCCTTCATGTTAGAAAACCTGGCTTTACTACTACTACTACTACTACTACTACTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCTGCATTTTTTAAAAATATATTATCTTATTTTAC";
  runtest("test02", sequences, expected);
}

void test03()
{
  std::vector<std::string> sequences{
"ATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTAT",
"ATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTAT",
"ATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTAT",
"TTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTT",
"ATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTAT"
  };

  std::string expected = "ATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTAT";
  runtest("test03", sequences, expected);

}

void test04()
{
  std::vector<std::string> sequences{
"ACTGGA",
"ACAGGA",
"ACCGA",
"ACTGGA",
"ACTGGA",
  };

  std::string expected = "ACTGGA";
  runtest("test04", sequences, expected);
}

int main(int argc, char **argv){
  test01();
  test02();
  test03();
  test04();
  return 0;
}